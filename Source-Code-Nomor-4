Dimisalkan 

1 = A
2 = B
3 = C
4 = D
5 = E
6 = F
7 = G
8 = H
9 = I

Node n1 = 6
Node n2 = 2
Node n3 = 7
Node n4 = 1
Node n5 = 4
Node n6 = 9
Node n7 = 3
Node n8 = 5
Node n9 = 8

Berikut kode yang sudah dirubah

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

public class AdjacencyList {
    public enum NodeColour { WHITE, GRAY, BLACK }

    public static class Node {
        int data;
        int distance;
        Node predecessor;
        NodeColour colour;

        public Node(int data) {
            this.data = data;
        }

        public String toString() {
            return "(" + data + ", d=" + distance + ")";
        }
    }

    Map<Node, List<Node>> nodes;

    public AdjacencyList() {
        nodes = new HashMap<>();
    }

    public void addEdge(Node n1, Node n2) {
        nodes.computeIfAbsent(n1, k -> new ArrayList<>()).add(n2);
    }

    public void bfs(Node s) {
        Set<Node> keys = nodes.keySet();
        for (Node u : keys) {
            if (u != s) {
                u.colour = NodeColour.WHITE;
                u.distance = Integer.MAX_VALUE;
                u.predecessor = null;
            }
        }
        s.colour = NodeColour.GRAY;
        s.distance = 0;
        s.predecessor = null;
        Queue<Node> q = new ArrayDeque<>();
        q.add(s);
        while (!q.isEmpty()) {
            Node u = q.remove();
            List<Node> adj_u = nodes.get(u);
            if (adj_u != null) {
                for (Node v : adj_u) {
                    if (v.colour == NodeColour.WHITE) {
                        v.colour = NodeColour.GRAY;
                        v.distance = u.distance + 1;
                        v.predecessor = u;
                        q.add(v);
                    }
                }
            }
            u.colour = NodeColour.BLACK;
            System.out.print(u + " ");
        }
    }

    public static void main(String[] args) {
        AdjacencyList graph = new AdjacencyList();
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        Node n3 = new Node(3);
        Node n4 = new Node(4);
        Node n5 = new Node(5);
        Node n6 = new Node(6);
        Node n7 = new Node(7);
        Node n8 = new Node(8);
        Node n9 = new Node(9)
        
        
        graph.addEdge(n1, n2);
        graph.addEdge(n2, n6);
        graph.addEdge(n2, n1);
        graph.addEdge(n2, n4);
        graph.addEdge(n3, n4);
        graph.addEdge(n4, n2);
        graph.addEdge(n4, n3);
        graph.addEdge(n4, n5);
        graph.addEdge(n6, n2);
        graph.addEdge(n6, n7);
        graph.addEdge(n7, n6);
        graph.addEdge(n7, n9);
        graph.addEdge(n8, n9);
        graph.addEdge(n9, n7);
        graph.addEdge(n9, n8);
        
        System.out.println("BFS traversal from node 6:");
        graph.bfs(n6);
        
        if (n6.colour == NodeColour.BLACK) {
            System.out.println("\nNode 6 is found.");
        } else {
            System.out.println("\nNode 6 is not  found.");
        }

    }
}
